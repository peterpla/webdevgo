package models

import (
	"errors"
	"regexp"
	"strings"

	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	"golang.org/x/crypto/bcrypt"

	"../hash"
	"../rand"
)

type User struct {
	gorm.Model
	Name         string
	Email        string `gorm:"not null;unique_index"`
	Password     string `gorm:"-"`
	PasswordHash string `gorm:"not null"`
	Remember     string `gorm:"-"`
	RememberHash string `gorm:"not null;unique_index"`
}

// userValidator is our validation/normalization layer that
// validates and normalizes data before passing it along our
// interface chain
type userValidator struct {
	UserDB
	hmac       hash.HMAC
	emailRegex *regexp.Regexp
}

// a compile-time error below indicates the UserDB type no longer matches
// the userGorm interface. They should match.
var _ UserDB = &userGorm{}

// UserDB is used to interact with the users database
//
// For pretty much all single user queries:
// If the user is found, return the user and nil
// If the user is not found, return nil and ErrNotFound
// If another error occurs, return the error we receive, which
// may not be an error generated by the models package.
//
// For single user queries, any error but ErrNotFound should
// probably result in a 500 ErrInternalServerError until we make
// "public" facing errors.
type UserDB interface {
	// Methods for querying for a single user
	ByID(id uint) (*User, error)
	ByEmail(email string) (*User, error)
	ByRemember(token string) (*User, error)

	// Methods for altering a single user
	Create(user *User) error
	Update(user *User) error
	Delete(id uint) error

	// Close a database connection
	Close() error

	// Migration helpers
	AutoMigrate() error
	DestructiveReset() error
}

var (
	// ErrNotFound is returned when the query executes successfully
	// but returned zero rows. I.e., the resource cannot be found
	// in the database.
	ErrNotFound = errors.New("models: resource not found")

	// ErrInvalidID is returned when an invalid ID is provided
	// to a method like Delete.
	ErrInvalidID = errors.New("models: ID provided was invalid")

	// ErrInvalidPassword is returned when an invalid password
	// is dtected when attempting to authenticate a user.
	ErrInvalidPassword = errors.New("models: incorrect password provided")

	// ErrEmailRequires is returned when an email address is not
	// provided when creating a user
	ErrEmailRequired = errors.New("models: email address is required")

	// ErrEmailInvalid is returned when an email address provided
	// fails our regular expression test
	ErrEmailInvalid = errors.New("models: email address is not valid")
)

// userGorm represents our database interaction layer
// and implements the UserDB interface fully
type userGorm struct {
	db *gorm.DB
}

// a compile-time error below indicates the userService type no longer matches
// the UserService interface. They should match.
var _ UserService = &userService{}

// UserService interface methods are used to work with the user model
type UserService interface {
	// Authenticate verifies the provided email address and
	// password are correct.
	// If correct, return the corresponding user and nil.
	// Otherwise, return ErrNotFound, ErrInvalidPassword, or
	// pass along an error received from deeper in the stack.
	Authenticate(email string, password string) (*User, error)
	UserDB
}

type userService struct {
	UserDB
}

const hmacSecretKey = "secret-hmac-key"
const userPwPepper = "secret-random-string"

// newUserGorm returns a pointer to a new userGorm instance,
// effectively a connection to the user database.
// Only newUserGorm knows or cares which SQL-style database we're using.
func newUserGorm(connectionInfo string) (*userGorm, error) {
	db, err := gorm.Open("postgres", connectionInfo)
	if err != nil {
		return nil, err
	}
	db.LogMode(true)
	return &userGorm{
		db: db,
	}, nil
}

// NewUserService returns a UserService INTERFACE that other
// packages will use to access the user database.
//
// To change to a NoSQL database, replace the newUserGorm call with
// a comparable call to open a different database.
func NewUserService(connectionInfo string) (UserService, error) {
	// log.Printf("enter NewUserService, connectionInfo: %s", connectionInfo)
	ug, err := newUserGorm(connectionInfo)
	if err != nil {
		return nil, err
	}

	hmac := hash.NewHMAC(hmacSecretKey)
	uv := newUserValidator(ug, hmac)

	return &userService{
		UserDB: uv,
	}, nil
}

// NewUserValidator returns a pointer to a userValidator instance
func newUserValidator(udb UserDB, hmac hash.HMAC) *userValidator {
	return &userValidator{
		UserDB:     udb,
		hmac:       hmac,
		emailRegex: regexp.MustCompile(`[a-z0-9._%+\-]+@[a-z0-9.\-]+\.[a-z]{2,16}$`),
	}
}

/* ********** ********** ********** */
/*         userService methods      */

// Authenticate will authenticate a user using the
// provided email address and password.
// If the email address provided is invalid, return
//   nil, ErrNotFound
// If the password provided is invalid, return
//   nil, ErrInvalidPassword
// If both the email and password are valid (success), return
//   user, nil
// If there is another error, return
//   nil, error
func (us *userService) Authenticate(email string, password string) (*User, error) {
	foundUser, err := us.ByEmail(email)
	if err != nil {
		return nil, err // pass on ByEmail's error return, email not found in the database
	}

	// test the provided password against the stored PasswordHash
	err = bcrypt.CompareHashAndPassword(
		[]byte(foundUser.PasswordHash),
		[]byte(password+userPwPepper))

	switch err {
	case nil:
		return foundUser, nil // SUCCESS, return user populated with fields from DB
	case bcrypt.ErrMismatchedHashAndPassword:
		return nil, ErrInvalidPassword // password did not produce matching hash
	default:
		return nil, err // some other error
	}
}

/* ********** ********** ********** */
/*            userGorm methods      */

// Create expects the Name, Email and Password fields to validated and
// normalized, and will create the user database record, populating
// the gorm.Model data including the ID, CreatedAt, and UpdatedAt fields.
func (ug *userGorm) Create(user *User) error {
	// fmt.Printf("enter Create, user=%+v\n", user)
	return ug.db.Create(user).Error
}

// ByID will look up a user with the provided ID.
// If the user is found, return a nil error
// If the user is not found, return ErrNotFound
// If there is another error, return and error with
// more information about what went wrong. This
// may not be an error generated by the models package.
//
// As a general rule, any error but ErrNotFound should
// probably result in a 500 error.
func (ug *userGorm) ByID(id uint) (*User, error) {
	// fmt.Printf("enter ByID, id=%d\n", id)
	var user User
	db := ug.db.Where("id = ?", id)
	err := first(db, &user)
	if err != nil {
		return nil, err
	}
	// fmt.Printf("exit ByID, user:%+v\n", user)
	return &user, nil
}

// ByEmail looks up a user with the given email address and
// returns that user.
// If the user is found, we will return a nil error.
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error genereated by the models package.
func (ug *userGorm) ByEmail(email string) (*User, error) {
	// fmt.Printf("enter ByEmail, email=%s\n", email)
	var user User
	db := ug.db.Where("email = ?", email)
	err := first(db, &user)
	// fmt.Printf("exit ByEmail, user:%+v\n", user)
	return &user, err
}

// ByRemember looks up a user by remember token hash and returns
// that user.
// Errors are the same as ByEmail above
func (ug *userGorm) ByRemember(rememberHash string) (*User, error) {
	// fmt.Printf("enter ByRemember, rememberHash=%s\n", rememberHash)
	var user User
	err := first(ug.db.Where("remember_hash = ?", rememberHash), &user)
	if err != nil {
		return nil, err
	}
	// fmt.Printf("exit ByRemember, user:%+v\n", user)
	return &user, nil
}

// Update expects the Name, Email and Password fields to be
// validated and normalized, and will update the user's DB record with the
// provided User object
func (ug *userGorm) Update(user *User) error {
	// fmt.Printf("enter Update, user=%+v\n", user)
	return ug.db.Save(user).Error
}

// Delete expects the user ID to be validated and normalized, and will
// delete the user with the provided ID
func (ug *userGorm) Delete(id uint) error {
	// fmt.Printf("enter Delete, id=%d\n", id)
	user := User{Model: gorm.Model{ID: id}}
	// fmt.Printf("calling ug.db.Delete passing user=%+v\n", user)
	return ug.db.Delete(&user).Error
}

// Close the userGorm database connection
func (ug *userGorm) Close() error {
	// log.Printf("enter UserService.Close")
	return ug.db.Close()
}

// DestructiveReset drops the user table and rebuilds it
func (ug *userGorm) DestructiveReset() error {
	err := ug.db.DropTableIfExists(&User{}).Error
	if err != nil {
		return err
	}
	return ug.AutoMigrate()
}

// AutoMigrate will attempt to automaticaly migrate
// the Users table
func (ug *userGorm) AutoMigrate() error {
	if err := ug.db.AutoMigrate(&User{}).Error; err != nil {
		return err
	}
	return nil
}

/* ********** ********** ********** */
/*       userValidator methods      */

// Create will validate arguments, create the password hash, overwrite the password
// value with an empty string, set the remember token and hash; then pass to the
// database layer to create the user record in the database
func (uv *userValidator) Create(user *User) error {
	/*
		if user.Password == "" {
			panic(ErrInvalidPassword)
		}
	*/
	err := runUserValFns(user,
		uv.bcryptPassword,
		uv.setRememberIfUnset,
		uv.hmacRemember,
		uv.normalizeEmail,
		uv.requireEmail,
		uv.emailFormat)
	if err != nil {
		return err
	}
	return uv.UserDB.Create(user)
}

// Update will set (normalize) the remember hash, then pass to the database layer to
// update the user record in the database.
func (uv *userValidator) Update(user *User) error {
	err := runUserValFns(user,
		uv.bcryptPassword,
		uv.hmacRemember,
		uv.normalizeEmail,
		uv.requireEmail,
		uv.emailFormat)
	if err != nil {
		return err
	}
	return uv.UserDB.Update(user)
}

// Delete will validate the provided user ID, then pass to the database layer to
// delete the user record from the database.
func (uv *userValidator) Delete(id uint) error {
	var user User
	user.ID = id

	err := runUserValFns(&user, uv.idGreaterThan(0))
	if err != nil {
		return err
	}
	return uv.UserDB.Delete(id)
}

// ByEmail normalizes the email address before passing it to the database layer
// to perform the query
func (uv *userValidator) ByEmail(email string) (*User, error) {
	user := User{
		Email: email,
	}
	err := runUserValFns(&user, uv.normalizeEmail)
	if err != nil {
		return nil, err
	}
	return uv.UserDB.ByEmail(user.Email)
}

// ByRemember normalization: hash the remember token and then pass it
// to UserDB's ByRemember
func (uv *userValidator) ByRemember(token string) (*User, error) {
	user := User{
		Remember: token,
	}
	if err := runUserValFns(&user, uv.hmacRemember); err != nil {
		return nil, err
	}
	return uv.UserDB.ByRemember(user.RememberHash)
}

// hmacRemember calculates and stores in User the remember token hash
func (uv *userValidator) hmacRemember(user *User) error {
	if user.Remember == "" {
		return nil
	}
	user.RememberHash = uv.hmac.Hash(user.Remember)
	return nil
}

// setRememberIfUnset ensures User has a remember token
func (uv *userValidator) setRememberIfUnset(user *User) error {
	if user.Remember != "" {
		return nil
	}
	token, err := rand.RememberToken()
	if err != nil {
		return err
	}
	user.Remember = token
	return nil
}

// idGreaterThan ensures the ID is greater than the provided argument
func (uv *userValidator) idGreaterThan(n uint) userValFn {
	return userValFn(func(user *User) error {
		if user.ID <= n {
			return ErrInvalidID
		}
		return nil
	})
}

// normalize email address by converting to lower case and trimming whitespace
func (uv *userValidator) normalizeEmail(user *User) error {
	user.Email = strings.ToLower(user.Email)
	user.Email = strings.TrimSpace(user.Email)
	return nil
}

// ensure email address is present
func (uv *userValidator) requireEmail(user *User) error {
	if user.Email == "" {
		return ErrEmailRequired
	}
	return nil
}

// ensure email address matches our regular expression test
func (uv *userValidator) emailFormat(user *User) error {
	if user.Email == "" {
		return nil
	}
	if !uv.emailRegex.MatchString(user.Email) {
		return ErrEmailInvalid
	}
	return nil
}

/* ********** ********** ********** */
/*       userValidator helpers      */

// all user validation/normalization functions implement this signature
// to simplify runUserValFns
type userValFn func(*User) error

// iterate through the sequence of userValFn-conforming validation/normalization functions
func runUserValFns(user *User, fns ...userValFn) error {
	for _, fn := range fns {
		if err := fn(user); err != nil {
			return err
		}
	}
	return nil
}

// bcryptPassword will hash a user's password with an
// app-wide pepper and becrypt, which salts for us
func (uv *userValidator) bcryptPassword(user *User) error {
	if user.Password == "" {
		// Nothing to do if a new password wasn't provided.
		return nil
	}

	pwBytes := []byte(user.Password + userPwPepper)
	hashedBytes, err := bcrypt.GenerateFromPassword(pwBytes, bcrypt.DefaultCost)
	if err != nil {
		return err
	}

	user.PasswordHash = string(hashedBytes) // save the PasswordHash in the user object
	user.Password = ""                      // ... but overwrite the Password immediately (does not reach DB)
	return nil
}

/* ********** ********** ********** */
/*            helper methods        */

// first will query using the provided gorm.DB pointer,
// get the first item returned, and store it into dst. If
// the query returns nothing, return ErrNotFound.
func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}
